using System.Collections.Generic;
using System.Text;

namespace BezpieczeÅ„stwo.Algorithms
{
    public class DES
    {
        private static byte[,] s1 = new byte[16, 4]
        {
            { 14, 0 , 4, 15 },
            { 4, 15, 1, 12 },
            { 13, 7, 14, 8 },
            { 1, 4, 8, 2 },
            { 2, 14, 13, 4 },
            { 15, 2, 6, 9 },
            { 11, 13, 2, 1 },
            { 8, 1, 11, 7 },
            { 3, 10, 15, 5 },
            { 10, 6, 12, 11 },
            { 6, 12, 9, 3 },
            { 12, 11, 7, 14 },
            { 5, 9, 3, 10 },
            { 9, 5, 10, 0 },
            { 0, 3, 5, 6 },
            { 7, 8, 0, 13 }
        };

        private static byte[,] s2 = new byte[16, 4]
        {
            { 15, 3, 0, 13 },
            { 1, 13, 14, 8 },
            { 8, 4, 7, 10},
            { 14, 7, 11, 1 },
            { 6, 15, 10, 3 },
            { 11, 2, 4, 15 },
            { 3, 8, 13, 4 },
            { 4, 14, 1, 2 },
            { 9, 12, 5, 11 },
            { 7, 0, 8, 6 },
            { 2, 1, 12, 7 },
            { 13, 10, 6, 12 },
            { 12, 6, 9, 0},
            { 0, 9, 3, 5 },
            { 5, 11, 2, 14 },
            { 10, 5, 15, 9 }
        };

        private static byte[,] s3 = new byte[16, 4]
        {
            { 10, 13, 13, 1 },
            { 0, 7, 6, 10},
            { 9, 0, 4, 13 },
            { 14, 9, 9, 0 },
            { 6, 3, 8, 6 },
            { 3, 4, 15, 9 },
            { 15, 6, 3, 8 },
            { 5, 10, 0, 7 },
            { 1, 2, 11, 4},
            { 13, 8, 1, 15 },
            { 12, 5, 2, 14 },
            { 7, 14, 12, 3 },
            { 11, 12, 5, 11 },
            { 4, 11, 10, 5},
            { 2, 15, 14, 2},
            { 8, 1, 7, 12 }
        };

        private static byte[,] s4 = new byte[16, 4]
        {
            { 7, 13, 10, 3 },
            { 13, 8, 6, 15},
            { 14, 11, 9, 0},
            { 3, 5, 0, 6},
            { 0, 6, 12, 10},
            { 6, 15, 11, 1},
            { 9, 0, 7, 13},
            { 10, 3, 13, 8 },
            { 1, 4, 15, 9},
            { 2, 7, 1, 4},
            { 8, 2, 3, 5},
            { 5, 12, 14, 11},
            { 11, 1, 5, 12},
            { 12, 10, 2, 7},
            { 4, 14, 8, 2},
            { 15, 9, 4, 14}
        };

        private static byte[,] s5 = new byte[16, 4]
        {
            { 2, 14, 4, 11 },
            { 12, 11, 2, 8},
            { 4, 2, 1, 12},
            { 1, 12, 11, 7},
            { 7, 4, 10, 1},
            { 10, 7, 13, 14},
            { 11, 13, 7, 2},
            { 6, 1, 8, 13},
            { 8, 5, 15, 6},
            { 5, 0, 9, 15},
            { 3, 15, 12, 0},
            { 15, 10, 5, 9},
            { 13, 3, 6, 10},
            { 0, 9, 3, 4},
            { 14, 8, 0, 5},
            { 9, 6, 14, 3}
        };

        private static byte[,] s6 = new byte[16, 4]
        {
            { 12, 10, 9, 4},
            { 1, 15, 14, 3},
            { 10, 4, 15, 2},
            { 15, 2, 5, 12},
            { 9, 7, 2, 9},
            { 2, 12, 8, 5},
            { 6, 9, 12, 15},
            { 8, 5, 3, 10},
            { 0, 6, 7, 11},
            { 13, 1, 0, 14},
            { 3, 13, 4, 1},
            { 4, 14, 10, 7},
            { 14, 0, 1, 6},
            { 7, 11, 13, 0},
            { 5, 3, 11, 8},
            { 11, 8, 6, 13 }
        };

        private static byte[,] s7 = new byte[16, 4]
        {
            { 4, 13, 1, 6 },
            { 11, 0, 4, 11},
            { 2, 11, 11, 13},
            { 14, 7, 13, 8},
            { 15, 4, 12, 1},
            { 0, 9, 3, 4},
            { 8, 1, 7, 10},
            { 13, 10, 14, 7},
            { 3, 14, 10, 9},
            { 12, 3, 15, 5},
            { 9, 5, 6, 0},
            { 7, 12, 8, 15},
            { 5, 2, 0, 14},
            { 10, 15, 5, 2},
            { 6, 8, 9, 3},
            { 1, 6, 2, 12}
        };

        private static byte[,] s8 = new byte[16, 4]
        {
            { 13, 1, 7, 2 },
            { 2, 15, 11, 1},
            { 8, 13, 4, 14},
            { 4, 8, 1, 7},
            { 6, 10, 9, 4},
            { 15, 3, 12, 10},
            { 11, 7, 14, 8},
            { 1, 4, 2, 13},
            { 10, 12, 0, 15},
            { 9, 5, 6, 12},
            { 3, 6, 10, 9},
            { 14, 11, 13, 0},
            { 5, 0, 15, 3},
            { 0, 14, 3, 5},
            { 12, 9, 5, 6},
            { 7, 2, 8, 11}
        };

        private static byte[,] P = new byte[4, 8]
        {
            { 16, 29, 1, 5, 2, 32, 19, 22},
            { 7, 12, 15, 18, 8, 27, 13, 11},
            { 20, 28, 23, 31, 24, 3, 30, 4},
            { 21, 17, 26, 10, 14, 9, 6, 25}
        };

        private static byte[,] E = new byte[6, 8]
        {
            { 32, 4, 8, 12, 16, 20, 24, 28 },
            { 1, 5, 9, 13, 17, 21, 25, 29},
            { 2, 6, 10, 14, 18, 22, 26, 30},
            { 3, 7, 11, 15, 19, 23, 27, 31},
            { 4, 8, 12, 16, 20, 24, 28, 32},
            { 5, 9, 13, 17, 21, 25, 29, 1},
        };

        /*StringBuilder outputl = new StringBuilder("");
            for (int i = 31; i >= 0; i--)
                outputl.Append((R >> i) % 2);
            outputl.Clear();
            for (int i = 47; i >= 0; i--)
                outputl.Append((key >> i) % 2);
            for (int i = 47; i >= 0; i--)
                outputl.Append((Rchanged >> i) % 2);*/


        public uint functionF(uint R, long key)
        {
            long Rchanged = 0;
            uint beforeOutput = 0;
            for(int i = 0; i < 8; i++)
                for (int j = 0; j < 6; j++)
                {
                    Rchanged = Rchanged << 1;
                    Rchanged += (R >> (32 - E[j, i])) % 2;
                }

            List<byte[,]> s = new List<byte[,]>();
            s.Add(s1); s.Add(s2); s.Add(s3); s.Add(s4); s.Add(s5); s.Add(s6); s.Add(s7); s.Add(s8);
            long xorResult = Rchanged ^ key;
            for(int i = 1; i <= 8; i++)
            {
                byte row = 0, column = 0, offset;
                offset = (byte)(48 - i * 6);
                row = (byte)((xorResult >> offset) % 2);
                column = (byte)((xorResult >> (offset + 1)) % 16);
                row += (byte)(((xorResult >> (offset + 5)) % 2) * 2);

                beforeOutput = beforeOutput << 6;
                beforeOutput += (uint)s[i - 1][column, row];
            }

            uint output = 0;
            for (int i = 0; i < 8; i++)
                for (int j = 0; j < 4; j++)
                {
                    output = output << 1;
                    output += (beforeOutput >> (32 - P[j, i])) % 2;
                }
            return output;
        }
    }
}